/**
 * 这个文件用于生成相关的前后端API代码
 * 用protoapi指定此文件生成相关代码
 */
syntax = "proto3";

import "common.proto";

// package
package yoozoo.protoconf.ts;
option java_package = "com.yoozoo.spring";
option go_package = "apisvr";

// env list - 环境
message EnvListRequest {}

message EnvListResponse { repeated Env envs = 1; }

// tag list - 用于分类
message TagListRequest {}

message TagListResponse { repeated Tag tags = 1; }

// product list
message ProductListRequest {
  int32 env_id = 1; // DEV, UAT, PROD etc
}

message ProductListResponse { repeated Product products = 1; }

// service list
message ServiceListRequest {
  repeated int32 tag_ids = 1; // optional, for filter
  int32 env_id = 2;
  int32 offset = 3;
  int32 limit = 4;
}

// service list
message ServiceSearchRequest {
  repeated int32 tag_ids = 1; // optional, for filter
  // string prefix = 2 [ (val_required) = true, (val_format) = "email" ];
  string prefix = 2 [(val_required) = true];
  int32 env_id = 3;
  int32 offset = 4;
  int32 limit = 5;
}

message ServiceListResponse {
  repeated Service services = 1;
  int32 offset = 2;
  int32 limit = 3;
  int32 total = 4;
}

// key list
// PS: separate key list & key value because proto and kv store may be on
// different endpoint
message KeyListRequest {
  int32 service_id = 1;
  int32 env_id = 2;
}

message KeyListResponse { repeated Key keys = 1; }

// key value
message KeyValueListRequest {
  int32 service_id = 1;
  repeated Key keys = 2;
}

message SearchKeyValueListRequest {
  string key = 1;
  int32 service_id = 2;
  int32 env_id = 3;
}

message KeyValueListResponse { repeated KeyValue key_values = 1; }

message KeyValueRequest {
  int32 service_id = 1;
  repeated KeyValue key_values = 2;
}

message KeyValueResponse { repeated KeyValue key_values = 1; }

message KVHistoryRequest {
  int32 service_id = 1;
  int32 key_id = 2;
}

message KVHistoryResponse { repeated KVHistoryItem KVhistorys = 1; }

message RegisterServiceRequest {
  int32 env_id = 1;
  string product_id = 2;
  string service_name = 3;
  repeated Tag tags = 4;
  string desc = 5;
}

message RegisterServiceResponse {
  int32 env_id = 1;
  string product_id = 2;
  int32 service_id = 3;
  string service_name = 4;
}

message UpdateServiceRequest {
  int32 service_id = 1;
  repeated Tag tags = 3;
  string desc = 4;
}

message UpdateServiceResponse {
  int32 service_id = 1;
  repeated Tag tags = 3;
  string desc = 4;
}

message UploadProtoFileRequest {
  int32 service_id = 1;
  int32 env_id = 2;
  string file = 3;
}

message UploadProtoFileResponse {
  int32 service_id = 1;
  int32 env_id = 2;
  int32 key_count = 3;
}

// other building blocks
message Env {
  int32 env_id = 1;
  string env_name = 2;
}

// 用于分类
message Tag {
  int32 tag_id = 1;
  string tag_name = 2;
}

message Product {
  string product_id = 1;
  string product_name = 2;
}

message Service {
  int32 service_id = 1;
  string service_name = 2;
  string product_id = 3;
  string product_name = 4;
  string desc = 5;
  repeated Tag tags = 6;
}

message Key {
  int32 key_id = 1;
  string key = 2;
  string dataType = 3;
  string defaultValue = 4;
  bool isWatched = 5;
}

message KeyValue {
  int32 key_id = 1;
  string key = 2;
  string dataType = 3;
  string defaultValue = 4;
  bool isWatched = 5;
  string value = 6;
}

message KVHistoryItem {
  string updated_value = 1;
  string updated_date = 2;
  string updated_by = 3;
  int64 revision = 4;
}

message Error {
  ErrorCode code = 1;
  string message = 2;
}

enum ErrorCode {
  DefaultError = 0;
  GeneralError = 1000;
  DatabaseError = 1001;
  EtcdError = 1002;
  SystemError = 1003;
}

/**
 * This service contains all the rpc related with services
 * option (service_method) can be "POST" or "GET", if not specified, both post
 * and get methods will be supported
 */
service AppService {
  option (auth) = true;
  option (common_error) = "CommonError";

  // get env
  rpc getEnv(EnvListRequest) returns (EnvListResponse) {
    option (error) = "Error";
  }
  // register a service
  rpc registerService(RegisterServiceRequest)
      returns (RegisterServiceResponse) {
    option (error) = "Error";
  }
  // update a service
  rpc updateService(UpdateServiceRequest) returns (UpdateServiceResponse) {
    option (error) = "Error";
  }
  // upload proto file
  rpc uploadProtoFile(UploadProtoFileRequest)
      returns (UploadProtoFileResponse) {
    option (error) = "Error";
  }
  // get a list of tags that contains apps
  rpc getTags(TagListRequest) returns (TagListResponse) {
    option (error) = "Error";
  }
  // get a list of apps under specified tag
  rpc getProducts(ProductListRequest) returns (ProductListResponse) {
    option (error) = "Error";
  }
  // get a list of services under specified tag
  rpc getServices(ServiceListRequest) returns (ServiceListResponse) {
    option (error) = "Error";
  }
  // search services
  rpc searchServices(ServiceSearchRequest) returns (ServiceListResponse) {
    option (error) = "Error";
  }
  // get a list of keys of the specified service
  rpc getKeyList(KeyListRequest) returns (KeyListResponse) {
    option (error) = "Error";
  }
  // get key-value pairs given the list of keys
  rpc getKeyValueList(KeyValueListRequest) returns (KeyValueListResponse) {
    option (error) = "Error";
  }
  // search key value list by key or value
  rpc searchKeyValueList(SearchKeyValueListRequest)
      returns (KeyValueListResponse) {
    option (error) = "Error";
  }
  // update value by key
  rpc updateKeyValue(KeyValueRequest) returns (KeyValueResponse) {
    option (error) = "Error";
  }
  // fetch key's value change history
  rpc fetchKeyHistory(KVHistoryRequest) returns (KVHistoryResponse) {
    option (error) = "Error";
  }
}