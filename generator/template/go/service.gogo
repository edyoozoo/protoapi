// Code generated by protoapi:go; DO NOT EDIT.

package {{.Package}}
{{.Imports}}
{{$s := .}}
import (
	"github.com/labstack/echo"
	"github.com/yoozoo/protoapi/protoapigo"
)

{{- if ne .AuthMethodType ""}}
const {{.AuthMethodType}}_path string = "{{.GetAuthOutputType}}";
{{- end}}

// {{.Name}} is the interface contains all the controllers
type {{.Name}} interface {
	{{- range .Methods }}

	{{.Title}}(c echo.Context, req {{.InputGoType}}) (resp {{.OutputGoType}}{{if ne .ErrorType ""}}, bizError {{.ErrorGoType}}{{end}}, err error)
	{{- end }}
}

{{- range .Methods }}
func _{{.Name}}_Handler(srv {{$.Name}}) echo.HandlerFunc {
	return func(c echo.Context) (err error) {
		req := new({{.InputGoTypeName}})

		{{if .AuthRequired}}
		authInfo, ok := c.Get({{$s.AuthMethodType}}_path)({{$s.GetAuthOutputType}})
		if !ok {
			{{if $s.HasCommonAuthError}}
			resp := {{$s.CommonErrorPointer}}{AuthError: &AuthError{Message: "Authentication is not set"}}
			return c.JSON(420, resp)
			{{else}}
			return c.JSON(500, err.Error())
			{{end}}
		}
		{{end}}

		if err = c.Bind(req); err != nil {
			{{if $s.HasCommonBindError}}
			resp := {{$s.CommonErrorPointer}}{BindError: &BindError{err.Error()}}
			return c.JSON(420, resp)
			{{else}}
			return c.JSON(500, err)
			{{end}}
		}
/*
		{{if $s.HasCommonValidateError}}
		if valErr := req.Validate(); valErr != nil {
			resp := {{$s.CommonErrorPointer}}{ValidateError: valErr}
			return c.JSON(420, resp)
		}
		{{end}}
*/
		resp{{if ne .ErrorType "" }}, bizError{{end}}, err := srv.{{.Title}}(c, req)
		if err != nil {
			{{if $s.HasCommonError}}
			// e:= err.({{$s.CommonError}}) will panic if assertion fail, which is not what we want
			if e, ok := err.({{$s.CommonError}}); ok {
				return c.JSON(420, e)
			}
			{{end}}
			return c.String(500, err.Error())
		}

		{{- if ne .ErrorType "" }}
		if bizError != nil {
			return c.JSON(400, bizError)
		}
		{{- end}}

		{{- if eq .Name $s.AuthMethodType}}
		c.Set({{$s.AuthMethodType}}_path, resp)
		{{- end}}

		return c.JSON(200, resp)
	}
}
{{- end }}

// Register{{.Name}} is used to bind routers
func Register{{.Name}}(e *echo.Echo, srv {{.Name}}) {
	Register{{.Name}}WithPrefix(e, srv, "")
}
// Register{{.Name}}WithPrefix is used to bind routers with custom prefix
func Register{{.Name}}WithPrefix(e *echo.Echo, srv {{.Name}}, prefix string) {
	// switch to strict JSONAPIBinder, if using echo's DefaultBinder
	if _, ok := e.Binder.(*echo.DefaultBinder); ok {
		e.Binder = new(protoapigo.JSONAPIBinder)
	}

	{{- range .Methods }}
	{{- if ne .ServiceType "POST" }}
	e.GET(prefix + "{{.Path}}", _{{.Name}}_Handler(srv))
	{{- end }}

	{{- if ne .ServiceType "GET" }}
	e.POST(prefix + "{{.Path}}", _{{.Name}}_Handler(srv))
	{{- end }}
	{{- end }}
}

